/*
Ken V PIC10A
For viewing purposes only
*/

#include <iostream>
#include <string>
#include <cmath>

using namespace std;

// function prototypes
string roman_digit(int digit, string one, string five, string ten);
string roman_numeral(int num);
int arabic_value(string roman_symbol);
int arabic_numeral(string roman_numeral);

/*
 this function takes in a user integer to return as a roman numeral
 
 @param one, five, ten have the arguments I/X/C, V/L/D, X/C/M respectively
 arguments are from main function and initialize parameters before execution
 */

string roman_digit(int digit, string one, string five, string ten){
    
    // variable to store (expression of a) roman numeral
    string roman_digit;
    
    // make digit positive if negative
    if (digit < 0)
        digit = -1*digit;
    
    // takes an int and produces appropriate roman numerals and structure of roman numerals
    switch(digit){
        case 0:
            roman_digit = ten;
            break;
        case 1:
            roman_digit = one;
            break;
        case 2:
            roman_digit = one+one;
            break;
        case 3:
            roman_digit = one+one+one;
            break;
        case 4:
            roman_digit = one+five;
            break;
        case 5:
            roman_digit = five;
            break;
        case 6:
            roman_digit = five+one;
            break;
        case 7:
            roman_digit = five+one+one;
            break;
        case 8:
            roman_digit = five+one+one+one;
            break;
        case 9:
            roman_digit = one+ten;
            break;
    }
    
    // return expression of roman numeral
    return roman_digit;
}


/*
 this function computes and returns any integer between 1 and 3999 as a roman numeral by calling roman_digit
 this function passes in the arguments for the parameters one, five, ten in roman_digit
 
 @param num gets argument with value of digit_to_roman from main function
 */

string roman_numeral(int num){
    
    // uses incantanation to store complete roman numeral
    string roman_numeral;
    
    // store each roman numeral based on decimal place
    string roman_ones;
    string roman_tens;
    string roman_hundreds;
    string roman_thousands;
    
    // if num less than 1 or greater than 3999, return "not representable as a roman numeral"
    if (num < 1 || num > 3999){
        roman_numeral = "not representable as a Roman numeral. ";
        return roman_numeral;
    }
    
    // compute num as roman numeral
    else{
        
        // need to check when digit is case 0, e.g. 20 30 40 1000 etc.
        
        // gets single digit in varying place, then gets its equivalent roman numeral
        int single_digit;
        
        // handles num where final 2 digits are 90
        if ((num+10)%100 == 0 || (num+10)%1000 == 0  || (num+100)%1000 == 0 ){
            
            // gets digit in tens place, then gets its roman numeral
            if (num >= 10){
                single_digit = (num%100)/10;
                roman_tens = roman_digit(single_digit, "XC", "L", "");
            }
            
            // gets digit in hundreds, then gets its roman numeral
            if (num >= 100){
                single_digit = (num%1000)/100;
                roman_hundreds = roman_digit(single_digit, "C", "D", "M");
            }
            
            // gets digit in thousands, then gets its roman numeral
            if (num >= 1000){
                single_digit = num/1000;
                roman_thousands = roman_digit(single_digit, "M", "", "");
            }
            
            // incantanate roman numerals to get the equivalent num
            roman_numeral = roman_thousands + roman_hundreds + roman_tens + roman_ones;
        }
        
        
        // handles num that is 10, 20, ... 100, ... 1000
        else if (num%10 == 0){
            
            // gets digit in tens place, then gets its roman numeral
            if (num >= 10){
                single_digit = (num%100)/10;
                roman_tens = roman_digit(single_digit, "X", "L", "");
            }
            
            // gets digit in hundreds, then gets its roman numeral
            if (num >= 100){
                single_digit = (num%1000)/100;
                roman_hundreds = roman_digit(single_digit, "C", "D", "");
            }
            
            // gets digit in thousands, then gets its roman numeral
            if (num >= 1000){
                single_digit = num/1000;
                roman_thousands = roman_digit(single_digit, "M", "", "");
            }
            
            // incantanate roman numerals to get the equivalent num
            roman_numeral = roman_thousands + roman_hundreds + roman_tens + roman_ones;
            
        }
        
        // handles the rest e.g. 2892
        else {
            
            // gets digit in ones place, then gets its equivalent roman numeral
            if (num%10 != 0){
                single_digit = num%10;
                roman_ones = roman_digit(single_digit, "I", "V", "X");
            }
            
            // gets digit in tens place, then gets its roman numeral
            if (num >= 10){
                single_digit = (num%100)/10;
                roman_tens = roman_digit(single_digit, "X", "L", "C");
            }
            
            // gets digit in hundreds, then gets its roman numeral
            if (num >= 100){
                single_digit = (num%1000)/100;
                roman_hundreds = roman_digit(single_digit, "C", "D", "M");
            }
            
            // gets digit in thousands, then gets its roman numeral
            if (num >= 1000){
                single_digit = num/1000;
                roman_thousands = roman_digit(single_digit, "M", "", "");
            }
            
            // incantanate roman numerals to get the equivalent num
            roman_numeral = roman_thousands + roman_hundreds + roman_tens + roman_ones;
            
        }
    }
    
    // return complete roman numeral of num
    return roman_numeral;
}


/*
 this function returns the integer value of a roman symbol
 
 @param roman_symbol gets argument with value roman_numeral from arabic_numeral function
 */

int arabic_value(string roman_symbol){
    
    int arabic_value;
    
    // convert roman symbol into arabic number, and return arabic number
    if (roman_symbol == "I")
        return arabic_value = 1;
    else if (roman_symbol == "V")
        return arabic_value = 5;
    else if (roman_symbol == "X")
        return arabic_value = 10;
    else if (roman_symbol == "L")
        return arabic_value = 50;
    else if (roman_symbol == "C")
        return arabic_value = 100;
    else if (roman_symbol == "D")
        return arabic_value = 500;
    else if (roman_symbol == "M")
        return arabic_value = 1000;
    else
        return arabic_value = 0;
    
}


/*
 this function returns the int value of the value roman_to_digit from main, and calls arabic_value
 
 @param roman_numeral gets argument with value of roman_to_digit from main
 */

int arabic_numeral(string roman_numeral){
    
    int arabic_numeral;
    
    
    int total_value = 0;
    
    // take char from substr
    string first_char = roman_numeral.substr(0,1);
    string next_char = roman_numeral.substr(1,1);
    
    // get arabic int for length 1, or zero string of roman
    if (roman_numeral.length() <= 1){
        return arabic_value(roman_numeral);
    }
    
    // get arabic int for length 1, or zero string of roman
    else if (roman_numeral.length() == 1){
        arabic_numeral = arabic_value(roman_numeral);
        total_value += arabic_numeral;
    }
    
    // get arabic int for length 2 string of roman
    else if (roman_numeral.length() == 2){
        if (arabic_value(first_char) > arabic_value(next_char) || arabic_value(first_char) == arabic_value(next_char))
        {
            arabic_numeral = arabic_value(first_char) + arabic_value(next_char);
            total_value += arabic_numeral;
        }
        
        else if (arabic_value(first_char) < arabic_value(next_char))
        {
            arabic_numeral = arabic_value(next_char) - arabic_value(first_char);
            total_value = arabic_numeral - total_value;
        }
    }
    
    // recursion instance to handle all other cases of roman numerals
    else{
        
    }
    return total_value;
}



int main(){
    
    // variable to store user int
    int digit_to_roman;
    
    // prompt user, store variable, and convert int to roman numeral while users int is between 1 and 3999 inclusive
    do{
        // prompt, and store int
        cout << "Enter an arabic number: ";
        cin >> digit_to_roman;
        
        // stores the roman numeral
        string roman_num;
        
        // function call, pass in user int, and print roman numeral
        roman_num = roman_numeral(digit_to_roman);
        cout << endl <<  digit_to_roman << " is " << roman_num << endl << endl;
        
    }while(digit_to_roman > 0 && digit_to_roman < 4000);
    
    // variable to store user string
    string roman_to_digit;
    
    // prompt user, store variable, and convert roman numeral to arabic num while users string is not "quit"
    do{
        // prompt, and store string
        cout << "Enter a Roman numeral: ";
        cin >> roman_to_digit;
        
        // stores the arabic number
        int arabic_num;
        
        // function call, pass in string, and print arabic number
        arabic_num = arabic_numeral(roman_to_digit);
        cout << endl << roman_to_digit << " is " << arabic_num << endl << endl;
        
    }while(roman_to_digit != "quit");
    
    return 0;
}
